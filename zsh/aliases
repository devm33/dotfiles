# Reload/edit zsh configuration
alias rz='source ~/.zshrc'
alias ze='$EDITOR ~/.dotfiles/zshrc'
alias za='$EDITOR ~/.dotfiles/zsh/aliases'

# zsh awesomeness
autoload -U zmv
alias mmv='noglob zmv -W'

# edit tmux conf
alias vt='$EDITOR ~/.dotfiles/tmux.conf'
alias ta='tmux attach || tmux'

# ls
alias lh='ls -lsh'
alias cls='clear;ls'

# aliases
alias alg='alias | grep '

# show path
path() {
    echo "${PATH//:/\n}"
}

# apt
alias acs='apt-cache search'
alias aci='apt-cache show'

# Show contents of directory after cd-ing into it
chpwd() {
  ls
  if [[ "$PWD" == *"electron/src"* ]]; then
    return
  fi
  if [[ "$PWD" == *"chromium/src"* ]]; then
    return
  fi
  if [ -d .git ]; then
      git diff --quiet || echo "--\ngit changes pending"
  fi
}

# navigation shortcuts
alias cdc='cd ~/code'
alias cd.='cd ~/.dotfiles'

# ViM
alias v='nvim'
alias vi='nvim'

# Vagrant
alias vg='vagrant'
alias rvg='vagrant destroy -f && vagrant up'
alias dvg='vagrant destroy -f && gclean && vagrant up'
alias vgrp='vagrant reload --provision'
alias vgd='vagrant destroy -f'
alias vgc='vagrant destroy -f && gclean'

# Bower
alias bower='noglob bower'

# Grunt / Gulp
grunt_and_gulp() {
    if [ -f 'gulpfile.js' -o -f 'Gulpfile.js' ]; then
        gulp $*;
    elif [ -f 'gruntfile.js' -o -f 'Gruntfile.js' ]; then
        grunt $*;
    else
        echo 'no grunt or gulp file found';
    fi
}
alias grlp='grunt_and_gulp'
alias gw='grunt_and_gulp watch'
alias b='grunt_and_gulp'

# Npm
alias npmdev='npm install --save-dev '
alias nr='npm run'
alias nri='npm run --ignore-scripts'
alias ns='npm start'
alias nt='npm test'
alias nm='npx mocha'

# Bundler
alias bx='bundle exec'
alias js='bundle exec jekyll serve --incremental'


# Util / Misc
alias wmin='watch -n0.1'
alias untar='tar xvf '
if [[ "$(uname)" == "Linux" ]]; then
    if [ -n "$SSH_CONNECTION" ]; then
        alias xo='open-remote'
        alias copy='pbcopy-remote'
    else
        alias xo='xdg-open'
        alias copy='xclip -selection c'
    fi
else
    alias xo='open'
    alias copy='pbcopy'
fi
if [ -e '/Applications/Google Chrome.app' ]; then
    alias co='open -a /Applications/Google\ Chrome.app'
elif [ -n "$SSH_CONNECTION" ]; then
    alias co='chropen-remote'
else
    alias co='google-chrome'
fi
chrome_pipe() {
    read url
    co "$url"
}
alias cop=chrome_pipe
alias ipy='ipython'

json() {
    if [ "$1" ]; then
        python -c "import sys,json; print json.load(sys.stdin)[\"$1\"]"
    else
        python -mjson.tool
    fi
}

encode() {
    echo "$1" | base64
}
decode() {
    echo "$1" | base64 --decode
}

markdown_preview() {
    TMPFILE="/tmp/$1.html"
    pandoc -o $TMPFILE "$1" && xdg-open $TMPFILE
}
markdown_watch() {
    TMPFILE="/tmp/$1.html"
    pandoc -o $TMPFILE "$1" && xdg-open $TMPFILE
    while inotifywait -e modify "$1"; do
        pandoc -o $TMPFILE "$1"
    done
}
alias mdp=markdown_preview
alias mdw=markdown_watch
compdef '_files -g "*.md *.txt"' markdown_preview
compdef '_files -g "*.md *.txt"' markdown_watch

# Hg aliases
alias hu='hg st | ifne hg amend && hg uploadchain'
alias hl='hg xl'
alias hs='hg st'
alias hs4='hg st --rev p4base'
alias hn='hg next'
alias hp='hg prev'
alias hd='hg diff'
alias ha='hg am'

# Git functions and aliases
alias glom='git log --oneline --decorate main..@'
alias gA='git add -A'
alias gpr='git remote prune origin'
alias gra='git remote add'
alias gmm='git merge $(git_main_branch)'
alias gfm='git fetch origin $(git_main_branch):$(git_main_branch)'
alias gwc='git whatchanged -p'
alias gcX='git clean -dfX'
alias gbv='git branch -vv'
alias pullall='for d in ./*/ ; do (cd "$d" && git pull); done'

git_commit_all_message() {
    git add -A
    git commit -m "$*"
}
alias gcam=git_commit_all_message

git_commit_message() {
    git commit -m "$*"
}
alias GC=git_commit_message

git_push_one_at_a_time() {
    cb=$(git_current_branch)
    for r in $(git rev-list --reverse origin/${cb}..${cb}); do
        git push --force-with-lease --force-if-includes origin ${r}:${cb}
    done
}
alias gp1b1=git_push_one_at_a_time

# Overwrite of alias in omz plugin due to error
alias gbda='git branch --no-color --merged | command grep -vE "^(\*|\s*master\s*$)" | command xargs -n 1 git branch -d'
# add version with hard delete
alias gbDa='git branch --no-color --merged | command grep -vE "^(\*|\s*master\s*$)" | command xargs -n 1 git branch -D'

# Overwrite alias of ag btw omz debian plugin to use for silver searcher
if [ -e /usr/bin/ag ];
then
    unalias ag 2>/dev/null
    alias Ag=ag
else
    # on osx brew installs ag as Ag
    alias ag=Ag
fi

git_copy_commit () {
    git rev-parse HEAD | tr -d '\n' | xclip -sel clip
}
alias gcpc=git_copy_commit

git_checkout_upstream () {
    git checkout $1
}
alias gcu=git_checkout_upstream
compdef '_values $(git branch -a --no-column --no-color | rev | cut -d" " -f 1 | cut -d"/" -f 1 | rev | sort -u)' git_checkout_upstream

git_reset_head () {
    if [[ -n $1 ]]; then
        git reset HEAD~$1
    else
        git reset HEAD
    fi
}
alias grh=git_reset_head

git_reset_head_hard () {
    if [[ -n $1 ]]; then
        git reset --hard HEAD~$1
    else
        git reset --hard HEAD
    fi
}
alias grhh=git_reset_head_hard

git_checkout_head () {
    if [[ -n $1 ]]; then
        git checkout HEAD~$1
    else
        git checkout HEAD
    fi
}
alias gch=git_checkout_head

# Util / Misc part 2
# stolen from: http://zshwiki.org/home/examples/functions

# Give us a root shell, or run the command with sudo.
# Expands command aliases first (cool!)
smart_sudo () {
    if [[ -n $1 ]]; then
        #test if the first parameter is a alias
        if [[ -n $aliases[$1] ]]; then
            #if so, substitute the real command
            sudo ${=aliases[$1]} $argv[2,-1]
        else
            #else just run sudo as is
            sudo $argv
        fi
    else
        #if no parameters were given, then assume we want a root shell
        sudo -s
    fi
}

alias s=smart_sudo
compdef _sudo smart_sudo

extract_archive () {
    local old_dirs current_dirs lower
    lower=${(L)1}
    old_dirs=( *(N/) )
    if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
        tar zxfv $1
    elif [[ $lower == *.gz ]]; then
        gunzip $1
    elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
        bunzip2 -c $1 | tar xfv -
    elif [[ $lower == *.bz2 ]]; then
        bunzip2 $1
    elif [[ $lower == *.zip ]]; then
        unzip $1
    elif [[ $lower == *.rar ]]; then
        unrar e $1
    elif [[ $lower == *.tar ]]; then
        tar xfv $1
    elif [[ $lower == *.lha ]]; then
        lha e $1
    else
        print "Unknown archive type: $1"
        return 1
    fi
    # Change in to the newly created directory, and
    # list the directory contents, if there is one.
    current_dirs=( *(N/) )
    for i in {1..${#current_dirs}}; do
        if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
            cd $current_dirs[$i]
            ls
            break
        fi
    done
}

alias ex=extract_archive
compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha"' extract_archive

# file sizes
alias sizes='du -sh */ | sort -hr'

# processes
alias psg='ps ax | grep -v grep | grep '
alias psga='ps ax | grep '

# tail
alias tf='tail -F'

# wget
alias wg='wget --no-check-certificate '

# Curl
alias curls='curl -o /dev/null -i'
alias curlcode='curl -s -o /dev/null -I -w "%{http_code}"'
alias curlcodel='curl -s -o /dev/null -I -w "%{http_code}" -L'
alias curll='curl -L'
alias curlvl='curl -vL'

# Simple Static Server (for current directory), stolen from paulirish/dotfiles
function server() {
    local port="${1:-8080}"
    chropen "http://localhost:${port}/" &
    # statik is good because it won't expose hidden folders/files by default.
    # npm install -g statik
    statik --port "$port" .
}
alias serve=server

# Functions to help manage dotfiles
dotup () {
    pushd ~/.dotfiles
    git pull
    if [ "$1" ]; then
        git commit -v -a
        git push
    fi
    rcup -v
    . ~/.zshrc
    popd
}

alias dotca='dotup 1'

dotall () {
    if [ ! -r ~/.rcrc ]; then
        if [ "$1" ]; then dotca; else dotup; fi
        return
    fi
    for d in `sed -n 's/DOTFILES_DIRS="\(.*\)"/\1/p' ~/.rcrc`; do
        eval df=$d
        pushd $df
        git pull
        if [ "$1" ]; then
            git commit -v -a
            git push
        fi
        popd
    done
    rcup -v
}

alias dotcall='dotall 1'

rama () {
    if ping -t 1 -c 1 192.168.0.33 &> /dev/null
    then
        ssh ramalocal
    else
        ssh rama
    fi
}

yumi () {
    if ping -t 1 -c 1 192.168.86.3 &> /dev/null
    then
        ssh openyumil
    else
        ssh openyumi
    fi
}

alias ytdl='youtube-dl -x --audio-format mp3 '

togif() {
    # Based on https://gist.github.com/SheldonWangRJT/8d3f44a35c8d1386a396b9b49b43c385
    output_file="$1.gif"

    ffmpeg -i $1 -pix_fmt rgb8 -r 10 $output_file && gifsicle -O3 $output_file -o $output_file
}
