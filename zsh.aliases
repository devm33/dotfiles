# Reload zsh configuration
alias rz="source ~/.zshrc"

# Show contents of directory after cd-ing into it
chpwd() {
  if [ -d .git ]; then
      git status
      echo '--'
  fi
  ls
}

alias v='vim'
alias vi='vim'

alias vg='vagrant'

alias untar='tar xvf '

alias xo='xdg-open '

markdown_preview() {
    pandoc -o /tmp/tmp.html "$1" && xdg-open /tmp/tmp.html
}
alias mdp=markdown_preview
compdef '_files -g "*.md *.txt"' markdown_preview

# Git functions and aliases

git_checkout_upstream () {
    git checkout $1
}
alias gcu=git_checkout_upstream
compdef '_values $(git branch -a --no-column --no-color | rev | cut -d" " -f 1 | cut -d"/" -f 1 | rev)' git_checkout_upstream

git_reset_head () {
    if [[ -n $1 ]]; then
        git reset HEAD~$1
    else
        git reset HEAD
    fi
}
alias grh=git_reset_head

git_reset_head_hard () {
    if [[ -n $1 ]]; then
        git reset --hard HEAD~$1
    else
        git reset --hard HEAD
    fi
}
alias grhh=git_reset_head_hard

git_checkout_head () {
    if [[ -n $1 ]]; then
        git checkout HEAD~$1
    else
        git checkout HEAD
    fi
}
alias gch=git_checkout_head

# stolen from: http://zshwiki.org/home/examples/functions

# Give us a root shell, or run the command with sudo.
# Expands command aliases first (cool!)
smart_sudo () {
    if [[ -n $1 ]]; then
        #test if the first parameter is a alias
        if [[ -n $aliases[$1] ]]; then
            #if so, substitute the real command
            sudo ${=aliases[$1]} $argv[2,-1]
        else
            #else just run sudo as is
            sudo $argv
        fi
    else
        #if no parameters were given, then assume we want a root shell
        sudo -s
    fi
}

alias s=smart_sudo
compdef _sudo smart_sudo

extract_archive () {
    local old_dirs current_dirs lower
    lower=${(L)1}
    old_dirs=( *(N/) )
    if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
        tar zxfv $1
    elif [[ $lower == *.gz ]]; then
        gunzip $1
    elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
        bunzip2 -c $1 | tar xfv -
    elif [[ $lower == *.bz2 ]]; then
        bunzip2 $1
    elif [[ $lower == *.zip ]]; then
        unzip $1
    elif [[ $lower == *.rar ]]; then
        unrar e $1
    elif [[ $lower == *.tar ]]; then
        tar xfv $1
    elif [[ $lower == *.lha ]]; then
        lha e $1
    else
        print "Unknown archive type: $1"
        return 1
    fi
    # Change in to the newly created directory, and
    # list the directory contents, if there is one.
    current_dirs=( *(N/) )
    for i in {1..${#current_dirs}}; do
        if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
            cd $current_dirs[$i]
            ls
            break
        fi
    done
}

alias ex=extract_archive
compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha"' extract_archive

# Functions to help manage dotfiles
alias s.z='source $HOME/.zshrc'

dotup () {
    pushd .
    cd ~/.dotfiles
    git pull
    . ~/.zshrc
    popd
}

dotca () {
    pushd .
    cd ~/.dotfiles
    git commit -v -a
    git push
    popd
}
